<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Metaverse Mall</title>
    <meta name="description" content="Dev Example â€” Networked-Aframe" />

    <!-- A-frame scripts and packages needed-->
    <script src="https://aframe.io/releases/1.3.0/aframe.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.4.0/socket.io.slim.js"></script>
    <script src="https://unpkg.com/aframe-troika-text/dist/aframe-troika-text.min.js"></script>
    <script src="//cdn.jsdelivr.net/gh/donmccurdy/aframe-extras@v6.1.1/dist/aframe-extras.min.js"></script>
    <script src="https://unpkg.com/aframe-randomizer-components@^3.0.1/dist/aframe-randomizer-components.min.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/IdeaSpaceVR/aframe-particle-system-component@master/dist/aframe-particle-system-component.min.js"></script>
    <script src="https://kit.fontawesome.com/7d6068cbaa.js" crossorigin="anonymous"></script>

    <!--js files needed for making custom components  -->
    <script src="/dist/networked-aframe.js"></script>
    <script src="/js/spawn-in-circle.component.js"></script>
    <script src="/js/play-on-click.js"></script>
    <script src="/js/tppcontrols.js"></script>
  </head>
  <body>
    <!--this element is our entire 3d world enclosing all the 3d components in it -->
    <a-scene
      networked-scene="
      room: basic-audio;
      debug: true;
      adapter: easyrtc;
      audio: true;
    "
    renderer="logarithmicDepthBuffer: true;"
    rotation="0 0 0"
    cursor="rayOrigin: mouse"
    >
      <a-assets >
        <!--this is our default model for avatar-->
        <a-asset-item
          id="vr-scene"
          src="https://d1a370nemizbjq.cloudfront.net/4d2b6f30-7929-49db-9e70-34b3f554793c.glb"
        ></a-asset-item>

        <!--all the other models used in this 3d world except products-->
        <img id="vr-scene1" src="/HdrSkyCloudy004_JPG_2K.jpg">
        <img id="vr-scene3" src="/TexturesCom_Grass0097_3_M.jpg"></a-asset-item>
        <a-asset-item id="vr-scene2" src="/dome/scene.gltf"></a-asset-item>
        <a-asset-item id="vr-scene4" src="/city_/scene.gltf"></a-asset-item>
        <a-asset-item id="vr-scene5" src="/chips/scene.gltf"></a-asset-item>

        <!-- Templates -->

        <!-- Avatar -->
        <template id="avatar-template">
          <a-entity class="avatar" networked-audio-source>
            <a-entity class="avatar" networked-audio-source>
              <a-entity
                class="nametag"
                troika-text="value: Hello ji there!;color: red;outlineColor: black;outlineWidth: 0.002;"
                side="double"
                troika-color="black"
                position="-60 6 0"
                scale="2 2 2"
              ></a-entity>

              <a-entity
                class="model"
                rotation="0 180 0"
                scale="2.8 2.8 2.8"
                position="-60 0 0"
                gltf-model="#vr-scene"
              ></a-entity>
            </a-entity>
          </a-entity>
        </template>

        <!-- /Templates -->
      </a-assets>

      <!-- secondary camara -->
      <a-entity
        follow-box="target: #player"
        look-controls
        movement-controls="fly: true; speed: 1"
      >
        <a-entity camera position="-60 6 -0.3" rotation="0 0 0" id="cam"></a-entity>
      </a-entity>

      <a-entity id="cameraRig">
        <a-entity
          id="player"
          networked="template:#avatar-template;attachTemplateToLocal:false;"
          camera
          position="130 1.6 -18"
          spawn-in-circle="radius:3"
          wasd-controls
          look-controls
          rotate-with-camera
          drag-rotate-component
        >
          <a-entity
            class="nametag"
            troika-text="value: Hello  ji there!;color:#228B22;outlineColor: black;outlineWidth: 0.002;"
            troika-color="black"
            position="-60 5.6 0"
            side="double"
            rotation="0 0 0"
            scale="2 2 2 "
            text-changer
          ></a-entity>

          <a-entity
            class="model"
            gltf-model="#vr-scene"
            rotation="0 180 0"
            scale="2.8 2.8 2.8"
            position="-60 0 0"
            model-changer
          ></a-entity>
        </a-entity>
      </a-entity>

      <!--this our central shopping mall-->
      <a-gltf-model src="#vr-scene2" position="72 -3 -105" scale="30 30 30" rotation="0 0 0"></a-gltf-model>
      <a-gltf-model src="#vr-scene4" position="68 -1 -310" scale="1500 1200 900" rotation="0 0 0"></a-gltf-model>
      <a-gltf-model src="#vr-scene5" position="68 0  -130" scale="8 10 15" rotation="0 0 0"></a-gltf-model>

      <!--this used for the trangular flooring of our mall-->
      <a-plane
        material="color : #00000; src:#vr-scene3; repeat: 500 500; normal-texture-repeat:500 500"
        rotation="-90 0 0"
        scale="500 500 1"
      ></a-plane>

      <a-entity
        position="233 0.7 -250"
        geometry="primitive: plane; width: 180; height: 28;"
        material="color: white; repeat: 500 500;"
        rotation="-90 50 0"
      ></a-entity>

      <!--this is lighting of  our central shopping mall-->
      <!-- <a-entity light="color: #ccccff; intensity: 1.1; type: ambient;" visible="no"></a-entity> -->
      <!-- <a-entity light="color: #ccccff; intensity: 1.5;" position="5 5 5"></a-entity> -->
      <a-sky src="#vr-scene1"></a-sky>
    </a-scene>

    <!--our buttons for audio and 3'rd person view -->
    <div class="actions">
      <button id="mic-btn" type="button" class="button"><i id="mt-btn" class="fa-solid fa-microphone fa-xl"></i></button>
      <button id="cam-btn" type="button" class="button"><i id="cm-btn" class="fa-solid fa-person fa-xl"></i></button>
            <button id="cam-btn" type="button" class="button"><i id="cm-btn" class="fa-solid fa-person fa-xl"></i></button>

    </div>

    <script>
      // Mic status and cam status
      let micEnabled = true;
      let camaraEnabled = true;
      // Mic and cam button ele
      var scene = document.querySelector("a-scene");
      const micBtnEle = document.getElementById("mic-btn");
      const camaraBtn = document.getElementById("cam-btn");
      const camaraElt = document.getElementById("cam");
      // // On mobile remove elements that are resource heavy
      const isMobile = AFRAME.utils.device.isMobile();

      if (isMobile) {
        const particles = document.getElementById("particles");
        particles.parentNode.removeChild(particles);
      }
    </script>
    <script src="js/gotmore.js"></script>
    <script>
      // Called by Networked-Aframe when connected to server
      function onConnect() {
        console.log("onConnect", new Date());
        if (!scene.hasLoaded) {
          scene.addEventListener("loaded", connect);
          return;
        }
        // Handle mic and camara button click (Mute and Unmute)
        micBtnEle.addEventListener("click", function () {
          NAF.connection.adapter.enableMicrophone(!micEnabled);
          micEnabled = !micEnabled;
          var ic = document.getElementById("mt-btn");
          if (micEnabled) {
            ic.className = "fa-solid fa-microphone fa-xl";
          } else {
            ic.className = "fa-solid fa-microphone-slash fa-xl";
          }
        });
        camaraBtn.addEventListener("click", function () {
          // NAF.connection.adapter.enableMicrophone(!micEnabled);
          if (!camaraEnabled) {
            camaraElt.setAttribute("position", "-60 6 -0.3");
          } else {
            camaraElt.setAttribute("position", "-60 6 6");
          }
          camaraEnabled = !camaraEnabled;
          var mc = document.getElementById("cm-btn");
          if (camaraEnabled) {
            mc.className = "fa-solid fa-person fa-xl";
          } else {
            mc.className = "fa-solid fa-eye fa-xl";
          }
        });
      }
    </script>
  </body>
</html>
